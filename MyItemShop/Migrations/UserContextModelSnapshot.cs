// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyItemShop.Models;

namespace MyItemShop.Migrations
{
    [DbContext(typeof(UserContext))]
    partial class UserContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyItemShop.Models.BaseClass", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("ID");

                    b.ToTable("BaseClass");
                });

            modelBuilder.Entity("MyItemShop.Models.Cart", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("MyItemShop.Models.CartItem", b =>
                {
                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<int?>("CartUserID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemID");

                    b.HasIndex("CartUserID");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("MyItemShop.Models.Order", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MyItemShop.Models.OrderedItem", b =>
                {
                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<string>("DateOfPurchase")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("OrderUserID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemID", "DateOfPurchase");

                    b.HasIndex("OrderUserID");

                    b.ToTable("OrderedItem");
                });

            modelBuilder.Entity("MyItemShop.Models.Category", b =>
                {
                    b.HasBaseType("MyItemShop.Models.BaseClass");

                    b.Property<string>("CategoryName")
                        .HasColumnType("varchar(50)");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MyItemShop.Models.Item", b =>
                {
                    b.HasBaseType("MyItemShop.Models.BaseClass");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ItemImageURL")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ItemName")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ItemPrice")
                        .HasColumnType("int");

                    b.HasIndex("CategoryID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("MyItemShop.Models.User", b =>
                {
                    b.HasBaseType("MyItemShop.Models.BaseClass");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyItemShop.Models.Cart", b =>
                {
                    b.HasOne("MyItemShop.Models.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyItemShop.Models.CartItem", b =>
                {
                    b.HasOne("MyItemShop.Models.Cart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("CartUserID");
                });

            modelBuilder.Entity("MyItemShop.Models.Order", b =>
                {
                    b.HasOne("MyItemShop.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyItemShop.Models.OrderedItem", b =>
                {
                    b.HasOne("MyItemShop.Models.Order", null)
                        .WithMany("OrderedItems")
                        .HasForeignKey("OrderUserID");
                });

            modelBuilder.Entity("MyItemShop.Models.Category", b =>
                {
                    b.HasOne("MyItemShop.Models.BaseClass", null)
                        .WithOne()
                        .HasForeignKey("MyItemShop.Models.Category", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyItemShop.Models.Item", b =>
                {
                    b.HasOne("MyItemShop.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyItemShop.Models.BaseClass", null)
                        .WithOne()
                        .HasForeignKey("MyItemShop.Models.Item", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MyItemShop.Models.User", b =>
                {
                    b.HasOne("MyItemShop.Models.BaseClass", null)
                        .WithOne()
                        .HasForeignKey("MyItemShop.Models.User", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyItemShop.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("MyItemShop.Models.Order", b =>
                {
                    b.Navigation("OrderedItems");
                });

            modelBuilder.Entity("MyItemShop.Models.User", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
